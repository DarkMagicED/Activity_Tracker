11.7.2023 Start

I know very little of how to create an executable, in fact this project will serve as my introduction to everything that is needed to accomplish a fully functional activity tracker that I plan to use on a daily basis.
I am familiar most with Python, so I will be seeking to maximize its usage

11.08.2023 
Great progress -> with the aid of ChatGPT I have learned how to use the terminal in VS code, how to navigate to my repository using cd, and list contents with ls commands. 
Calendar.py is created, and in it I was suggested by Alex (I asked ChatGPT for a human name it would like to be refered to) to import the calendar module which is included in Python's standard library
Alex also helped me navigate to and execute with the command -> python calendar.py

upon execution, i am prompted for input: year, and month. Year as a 4 digit int and month as an int between 1 - 12. When these inputs were sent within guidelines a text based, formatted calendar was output in the vs terminal.
This is great, because it looks very similar to the end product that I have in mind, however I would like all 12 months to appear side by side with eachother.
I have attempted to input "1-12" but this gave an error

The calendar module has 768 lines total. I will review these to see what other functionality it may already have built in that can serve the project.

11.09.2023
The split function in vs code is great for updating the log
Peering deeper into the standard module calendar, i am seeing imports for sys, datetime, locale.

I asked Alex for a high level summary of these imports:

Sys:
The `sys` module in Python is a part of the standard library and provides access to some variables used or maintained by the Python interpreter, as well as functions that interact closely with the interpreter and the runtime environment. Here's a high-level summary of what the `sys` module offers:

1. **Access to Interpreter Variables:**
   - `sys.argv`: A list containing command-line arguments passed to the script.
   - `sys.path`: A list of strings specifying the search path for modules.
   - `sys.version`: A string containing the Python version.

2. **Runtime Environment Information:**
   - `sys.platform`: A string identifying the platform (e.g., 'linux', 'win32', 'darwin').
   - `sys.executable`: A string containing the path to the Python interpreter executable.

3. **Exiting the Interpreter:**
   - `sys.exit()`: Raises the `SystemExit` exception, allowing you to exit the Python interpreter.

4. **Standard Streams:**
   - `sys.stdin`, `sys.stdout`, `sys.stderr`: Represent the standard input, output, and error streams, respectively.

5. **Memory Management:**
   - `sys.getsizeof()`: Returns the size of an object in bytes.
   - `sys.getrefcount()`: Returns the reference count of an object.

6. **Module Management:**
   - `sys.modules`: A dictionary mapping module names to module objects, used to manage the cache of imported modules.

7. **Interpreter Configuration:**
   - `sys.setrecursionlimit()`: Sets the maximum recursion depth for the interpreter.

8. **Other Utilities:**
   - `sys.exc_info()`: Returns a tuple containing information about the current exception being handled.
   - `sys.settrace()`: Sets a trace function for all threads.

The `sys` module is particularly useful for tasks related to system interaction, runtime configuration, and introspection. However, it should be used judiciously, as some functions, such as modifying `sys.path` or using `sys.exit()`, can have significant impacts on the behavior of your program. It's a powerful tool for gaining insights into the Python interpreter and managing certain aspects of the runtime environment.

datetime:
The `datetime` module in Python is part of the standard library and provides classes for working with dates and times. Here's a high-level summary of what the `datetime` module offers when you import it:

1. **Date and Time Objects:**
   - `datetime.datetime`: Represents a date and time.
   - `datetime.date`: Represents a date (year, month, day).
   - `datetime.time`: Represents a time of day.

2. **Creating Date and Time Objects:**
   - `datetime.datetime.now()`: Returns the current date and time.
   - `datetime.datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0)`: Creates a `datetime` object with the specified values.
   - `datetime.date(year, month, day)`: Creates a `date` object with the specified values.
   - `datetime.time(hour=0, minute=0, second=0, microsecond=0)`: Creates a `time` object with the specified values.

3. **Operations on Date and Time Objects:**
   - Arithmetic operations (addition, subtraction) can be performed on `datetime` objects.
   - `timedelta` objects represent differences between two dates or times.

4. **Formatting and Parsing:**
   - `datetime.datetime.strftime(format)`: Returns a string representing the date and time according to the format string.
   - `datetime.datetime.strptime(date_string, format)`: Parses a string representing a date and time according to the format string.

5. **Properties and Methods:**
   - `datetime.datetime.year`, `datetime.datetime.month`, `datetime.datetime.day`: Get the year, month, and day.
   - `datetime.datetime.hour`, `datetime.datetime.minute`, `datetime.datetime.second`: Get the hour, minute, and second.
   - `datetime.datetime.weekday()`: Returns the day of the week as an integer (Monday is 0 and Sunday is 6).

6. **Constants:**
   - `datetime.MINYEAR`, `datetime.MAXYEAR`: The minimum and maximum representable years.

7. **Time Zones:**
   - `datetime.timezone`: Represents a fixed offset from UTC.
   - `datetime.timedelta`: Represents the difference between two dates or times.

8. **ISO 8601 Format:**
   - `datetime.datetime.fromisoformat(iso_string)`: Creates a `datetime` object from an ISO 8601 formatted string.

The `datetime` module is essential for handling a wide range of date and time-related tasks, from simple date arithmetic to more complex operations involving time zones and formatting. It provides a versatile set of tools for working with temporal data in Python.

locale:
The `locale` module in Python provides a way to set and query the locale settings, which include formats for numbers, dates, and times based on the user's or system's preferences. Here's a high-level summary of what the `locale` module offers when you import it:

1. **Setting and Querying Locale:**
   - `locale.setlocale(category, locale=None)`: Sets or queries the locale for a given category (e.g., `LC_TIME`, `LC_NUMERIC`).
   - `locale.getlocale(category=LC_ALL)`: Gets the current locale for a given category.

2. **Number Formatting:**
   - `locale.format_string(format_string, val, grouping=False)`: Formats a string according to the user's locale.
   - `locale.format(locale, format, val, grouping=False)`: Similar to `format_string` but allows specifying the locale explicitly.
   - `locale.currency(val, symbol=True, grouping=False)`: Formats a currency value.

3. **Date and Time Formatting:**
   - `locale.nl_langinfo(item)`: Returns a string corresponding to a locale constant, such as `MON_1`.
   - `locale.strcoll(s1, s2)`: Compares two strings using the locale's collating order.

4. **Constants:**
   - `locale.LC_NUMERIC`, `locale.LC_TIME`, `locale.LC_MONETARY`, and others: Constants representing different categories for which you can set or query the locale.

5. **Currency Formatting:**
   - `locale.localeconv()`: Returns a dictionary containing information about the current locale's formatting conventions, including currency symbols and separators.

6. **Example Usage:**
   ```python
   import locale

   # Set the locale for numeric formatting
   locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')

   # Format a number
   formatted_number = locale.format("%d", 1234567, grouping=True)
   print(formatted_number)
   ```

The `locale` module is useful when you need to adapt your program's output to the user's or system's preferred formats, especially in internationalization and localization scenarios. Keep in mind that the availability and behavior of locale settings may vary across different platforms.

Quite a few things in there that I don't understand, but some lines provide clear context on where the calendar data 
is coming from as well as the leap years and other weird inconsistensies in our calendar being accounted for

